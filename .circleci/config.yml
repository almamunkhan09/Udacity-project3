version: 2.1

orbs:
  slack: circleci/slack@4.4.4

## Commands for destroying the infrustucture in case of fail in a step.
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend :
        type: string
        default: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      
      frontend: 
        type: string
        default: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name << parameters.backend >>
            aws cloudformation delete-stack \
              --stack-name  << parameters.frontend >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      migration_id:
        type: string
        default: "migration_${CIRCLE_WORKFLOW_ID:0:7}" 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/Cg7KfwNcoZm1BeguvqiGKs/<< parameters.migration_id >> )
            echo $SUCCESS
            if(( $SUCCESS==1 )) 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi

jobs:
  ## Building frontend For this project
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

## Adding Slack Notifications. Currently fail notification is on

      - slack/notify:
         event: fail
         template: basic_fail_1
      
      # - slack/notify:
      #    event: pass
      #    template: success_tagged_deploy_1
      
######################################################################

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build  

## Adding Slack Notifications. Currently fail notification is on

      - slack/notify:
         event: fail
         template: basic_fail_1
      
      # - slack/notify:
      #    event: pass
      #    template: success_tagged_deploy_1
  
##################################################################
## Test Frontend

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Test the fontend
          command: |
            cd frontend
            npm install
            npm run test
## Slack notification for test 

      - slack/notify:
         event: fail
         template: basic_fail_1
  
## Test backend
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run: 
          name: Test the backend
          command: |
            cd backend
            npm install
            npm run test
      
## Slack notification for test 

      - slack/notify:
         event: fail
         template: basic_fail_1
  

      # Restore from cache
      # Your job code here

############################################################
## Auditing the codes

# Audit the frontend

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: audit the frontend code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      ## Slack notification for test 

      - slack/notify:
         event: fail
         template: basic_fail_1
  
## Audit the backend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: audit the backend code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

      - slack/notify:
         event: fail
         template: basic_fail_1

# configure Infrastructure
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.7.18
    steps:
      - checkout 
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist 
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             mkdir -p workspace
             aws ec2 describe-instances \
             --filters "Name=tag-value,Values=udapeople" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > workspace/inventory.txt
             cat workspace/inventory.txt 
             aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text > workspace/oldworkflowid.txt
             
      - persist_to_workspace:
          root: workspace
          paths:
            - inventory.txt
            - oldworkflowid.txt
      
      - destroy-environment  # Here's where you will add some code to rollback on failure



  configure-infrastructure:
    docker:
      - image: python:3.7.13-alpine3.16
    steps:
      
      - checkout 
      
      - add_ssh_keys:
          fingerprints: ["8c:07:8e:49:57:54:f3:d4:94:23:74:ed:97:5a:d0:38"] # You can get this ID in the section where you registered the SSH K
      - run:
          name: Install tar utility
          command: |
            apk add tar gzip
      
      - attach_workspace:
            at: workspace # path

      - run:
          name: Install dependencies
          command: |
             apk add openssh-client
             apk add ansible
#Installation of aws cli inorder to destroy infrustruture if fail

      - run: 
          name: install awscli 
          command: |
            apk update && apk add --no-cache curl gcompat zip 
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip -o awscliv2.zip 
            unzip awscliv2.zip && ./aws/install
      - run:
          name: Configure server
          command: |
            tail -1 workspace/inventory.txt >> .circleci/ansible/inventory.txt
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml -u ubuntu -c ssh
         

      - destroy-environment       # Here's where you will add some code to rollback on failure 

  run-migrations:
      docker:
        # Docker image here that supports NodeJS
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations:revert
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
              
        - run:
            name: Send migration results to kvdb
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl https://kvdb.io/Cg7KfwNcoZm1BeguvqiGKs/migration_${CIRCLE_WORKFLOW_ID:0:7} -kd '1'
              fi
        
        - revert-migrations
#      # Here's where you will add some code to rollback on failure      


  deploy-frontend:
    docker:
      # Docker image here that supports NodeJS
      - image: amazon/aws-cli:2.7.18
    steps:
      # Checkout code from git
      - checkout
      

      - run:
          name: Install tar utility
          command: |
            yum update -y
            yum install -y tar gzip
            yum install sudo -y
      - run: 
          name: install node
          command: |
            yum update -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            sudo yum install nodejs -y
      - run: 
          name: install python3
          command: |
            yum install -y python3
            sudo amazon-linux-extras install ansible2 -y
            
      - run: 
          name: install ansible
          command: |
            sudo amazon-linux-extras install ansible2 -y
            ansible --version
      - attach_workspace:
          at: workspace 
      - run: 
          name: add enviornmental variables
          command: |
            export BACKEND_IP=$(tail -1 workspace/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - run: 
          name: deploy frontend
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  deploy-backend:
    docker:
      - image: python:3.7.13-alpine3.16
    steps:
      
      - checkout 
      
      - add_ssh_keys:
          fingerprints: ["8c:07:8e:49:57:54:f3:d4:94:23:74:ed:97:5a:d0:38"] # You can get this ID in the section where you registered the SSH K
      - run:
          name: Install tar utility
          command: |
            apk add tar gzip
      
      - attach_workspace:
            at: workspace # path

      - run:
          name: Install dependencies ansible,openssh,nodejs
          command: |
             apk add openssh-client
             apk add ansible
             apk add --update nodejs npm
             node --version
             npm --version 
#Installation of aws cli inorder to destroy infrustruture if fail

      - run: 
          name: install awscli 
          command: |
            apk update && apk add --no-cache curl gcompat zip &&  \
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip -o awscliv2.zip && \
            unzip awscliv2.zip && ./aws/install
            aws --version
      - run:
          name: deploy backend
          command: |
            tail -1 workspace/inventory.txt >> .circleci/ansible/inventory.txt
            cd backend
            
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            npm i
            npm run build
            cd ..
            tar -C backend -cvzf artifact.tar.gz .
            cd .circleci/ansible
            echo "contents of the inventory.txt ...."
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            aws --version
            ansible-playbook -i inventory.txt deploy-backend.yml -u ubuntu -c ssh
         

      - destroy-environment   
      - revert-migrations 
#       # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:3.15.5
    steps:
      
      - attach_workspace:
            at: workspace # path

      - run:
          name: Install dependencies ansible,openssh,nodejs
          command: |
             apk add --update nodejs npm
             node --version
             npm --version 
      - run: 
          name: install awscli and curl 
          command: |
            apk update && apk add --no-cache curl gcompat zip &&  \
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip -o awscliv2.zip && \
            unzip awscliv2.zip && ./aws/install
            aws --version
      - run: 
          name: sleep 5 min 
          command: |
            sleep 2m
      - run:
          name: backend smoke-test
          command: | 
            export API_URL="http://$(tail -1 workspace/inventory.txt):3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
        
      - run:
          name: frontend smoke-test
          command: | 
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "${URL}"
            if curl -s "${URL}" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
         

      - destroy-environment 
      - revert-migrations      # Here's where you will add some code to rollback on failure      

  cloudfront-update:
    docker:
      - image: alpine:3.15.5
    steps:
      
      - checkout
          
      - attach_workspace:
            at: workspace # path

      - run:
          name: Install dependencies ansible,openssh,nodejs
          command: |
             apk add --update nodejs npm
             node --version
             npm --version 
      - run: 
          name: install awscli and curl 
          command: |
            apk update && apk add --no-cache curl gcompat zip &&  \
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip -o awscliv2.zip && \
            unzip awscliv2.zip && ./aws/install
            aws --version
      
      - run:
          name: cloudfront-update
          command: | 
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment 
      - revert-migrations  

  cleanup:
    docker:
      - image: alpine:3.15.5
    steps:
      
      - checkout
      - attach_workspace:
            at: workspace # path
          
      - run: 
          name: install awscli and curl 
          command: |
            apk update && apk add --no-cache curl gcompat zip &&  \
            curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip -o awscliv2.zip && \
            unzip awscliv2.zip && ./aws/install
            aws --version
      
      - run:
          name: Get the old workflow ids
          command: | 
            export OldWorkflowID=$(cut -d "-" -f 2 workspace/oldworkflowid.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            # echo Stack names: "${STACKS[@]}"           

      - run:
          name: delete old stacks
          command: | 
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
            echo "Nothing to clean"
            fi        

      - destroy-environment 
      - revert-migrations  

            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update] 